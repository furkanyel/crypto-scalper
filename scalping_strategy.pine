//@version=5
strategy("5M Crypto Scalping Strategy [BACKTEST]", overlay=true, initial_capital=10000, default_qty_type=strategy.percent_of_equity, default_qty_value=100, commission_type=strategy.commission.percent, commission_value=0.1, slippage=2)

// ================================================================================
// INPUT SETTINGS
// ================================================================================

// RSI Settings
rsiLength = input.int(14, "RSI Period", minval=1, group="RSI Settings")
rsiOverbought = input.int(70, "RSI Overbought Level", minval=50, maxval=100, group="RSI Settings")
rsiOversold = input.int(30, "RSI Oversold Level", minval=0, maxval=50, group="RSI Settings")

// EMA Settings
emaFastLength = input.int(9, "Fast EMA Period", minval=1, group="EMA Settings")
emaSlowLength = input.int(21, "Slow EMA Period", minval=1, group="EMA Settings")

// Bollinger Bands Settings
bbLength = input.int(20, "Bollinger Bands Period", minval=1, group="Bollinger Bands Settings")
bbStdDev = input.float(2.0, "Bollinger Bands Std Dev", minval=0.1, step=0.1, group="Bollinger Bands Settings")

// Volume Settings
volumeMaLength = input.int(20, "Volume MA Period", minval=1, group="Volume Settings")

// Risk Management Settings
stopLossPercent = input.float(2.0, "Stop Loss %", minval=0.1, maxval=10, step=0.1, group="Risk Management")
takeProfit1Percent = input.float(2.0, "Take Profit 1 % (50% position)", minval=0.1, maxval=20, step=0.1, group="Risk Management")
takeProfit2Percent = input.float(4.0, "Take Profit 2 % (30% position)", minval=0.1, maxval=30, step=0.1, group="Risk Management")
takeProfit3Percent = input.float(6.0, "Take Profit 3 % (20% position)", minval=0.1, maxval=50, step=0.1, group="Risk Management")
useTrailingStop = input.bool(false, "Use Trailing Stop", group="Risk Management")
trailingStopPercent = input.float(1.0, "Trailing Stop %", minval=0.1, maxval=5, step=0.1, group="Risk Management")

// Backtest Date Range
useDateFilter = input.bool(true, "Use Date Filter", group="Backtest Settings")
startDate = input.time(timestamp("01 Jan 2023 00:00"), "Start Date", group="Backtest Settings")
endDate = input.time(timestamp("31 Dec 2024 23:59"), "End Date", group="Backtest Settings")

// Display Settings
showEMAs = input.bool(true, "Show EMAs", group="Display Settings")
showBollingerBands = input.bool(true, "Show Bollinger Bands", group="Display Settings")
showLabels = input.bool(true, "Show Entry/Exit Labels", group="Display Settings")

// ================================================================================
// INDICATOR CALCULATIONS
// ================================================================================

// RSI Calculation
rsiValue = ta.rsi(close, rsiLength)

// EMA Calculations
emaFast = ta.ema(close, emaFastLength)
emaSlow = ta.ema(close, emaSlowLength)

// Bollinger Bands Calculation
[bbMiddle, bbUpper, bbLower] = ta.bb(close, bbLength, bbStdDev)

// Volume Analysis
volumeMa = ta.sma(volume, volumeMaLength)
volumeAboveAverage = volume > volumeMa

// ================================================================================
// SIGNAL CONDITIONS
// ================================================================================

// RSI Conditions (using crossover/crossunder to avoid repainting)
rsiCrossAboveOversold = ta.crossover(rsiValue, rsiOversold)
rsiCrossBelowOverbought = ta.crossunder(rsiValue, rsiOverbought)

// EMA Crossover Conditions
emaBullishCross = ta.crossover(emaFast, emaSlow)
emaBearishCross = ta.crossunder(emaFast, emaSlow)

// Bollinger Bands Conditions
priceTouchLowerBB = low <= bbLower
priceTouchUpperBB = high >= bbUpper

// Buy Signal - All conditions must be true
buySignal = rsiCrossAboveOversold and emaBullishCross and priceTouchLowerBB and volumeAboveAverage

// Sell Signal - All conditions must be true
sellSignal = rsiCrossBelowOverbought and emaBearishCross and priceTouchUpperBB and volumeAboveAverage

// Date Filter
inDateRange = useDateFilter ? (time >= startDate and time <= endDate) : true

// ================================================================================
// STRATEGY EXECUTION
// ================================================================================

// Calculate Stop Loss and Take Profit Levels
longStopLoss = close * (1 - stopLossPercent / 100)
longTP1 = close * (1 + takeProfit1Percent / 100)
longTP2 = close * (1 + takeProfit2Percent / 100)
longTP3 = close * (1 + takeProfit3Percent / 100)

shortStopLoss = close * (1 + stopLossPercent / 100)
shortTP1 = close * (1 - takeProfit1Percent / 100)
shortTP2 = close * (1 - takeProfit2Percent / 100)
shortTP3 = close * (1 - takeProfit3Percent / 100)

// Entry Conditions
if buySignal and inDateRange and strategy.position_size == 0
    strategy.entry("Long", strategy.long)
    strategy.exit("TP1", "Long", limit=longTP1, stop=longStopLoss, qty_percent=50)
    strategy.exit("TP2", "Long", limit=longTP2, stop=longStopLoss, qty_percent=30)
    strategy.exit("TP3", "Long", limit=longTP3, stop=longStopLoss, qty_percent=20)
    
    if showLabels
        label.new(bar_index, low, 
         text="ðŸ“Š LONG\nðŸ’° " + str.tostring(close, format.mintick) + 
         "\nðŸ›‘ SL: " + str.tostring(longStopLoss, format.mintick) + 
         "\nðŸŽ¯ TP1: " + str.tostring(longTP1, format.mintick) +
         "\nðŸŽ¯ TP2: " + str.tostring(longTP2, format.mintick) +
         "\nðŸŽ¯ TP3: " + str.tostring(longTP3, format.mintick),
         style=label.style_label_up, color=color.new(color.green, 20), textcolor=color.white, size=size.small)

if sellSignal and inDateRange and strategy.position_size == 0
    strategy.entry("Short", strategy.short)
    strategy.exit("TP1", "Short", limit=shortTP1, stop=shortStopLoss, qty_percent=50)
    strategy.exit("TP2", "Short", limit=shortTP2, stop=shortStopLoss, qty_percent=30)
    strategy.exit("TP3", "Short", limit=shortTP3, stop=shortStopLoss, qty_percent=20)
    
    if showLabels
        label.new(bar_index, high,
         text="ðŸ“Š SHORT\nðŸ’° " + str.tostring(close, format.mintick) + 
         "\nðŸ›‘ SL: " + str.tostring(shortStopLoss, format.mintick) + 
         "\nðŸŽ¯ TP1: " + str.tostring(shortTP1, format.mintick) +
         "\nðŸŽ¯ TP2: " + str.tostring(shortTP2, format.mintick) +
         "\nðŸŽ¯ TP3: " + str.tostring(shortTP3, format.mintick),
         style=label.style_label_down, color=color.new(color.red, 20), textcolor=color.white, size=size.small)

// Trailing Stop
if useTrailingStop
    if strategy.position_size > 0
        trailOffset = close * (trailingStopPercent / 100)
        strategy.exit("Trail Long", "Long", trail_offset=trailOffset, trail_price=close)
    
    if strategy.position_size < 0
        trailOffset = close * (trailingStopPercent / 100)
        strategy.exit("Trail Short", "Short", trail_offset=trailOffset, trail_price=close)

// ================================================================================
// PLOTTING
// ================================================================================

// Plot EMAs
plot(showEMAs ? emaFast : na, "Fast EMA", color=color.blue, linewidth=2)
plot(showEMAs ? emaSlow : na, "Slow EMA", color=color.orange, linewidth=2)

// Plot Bollinger Bands
bbUpperPlot = plot(showBollingerBands ? bbUpper : na, "BB Upper", color=color.new(color.red, 70), linewidth=1)
bbLowerPlot = plot(showBollingerBands ? bbLower : na, "BB Lower", color=color.new(color.green, 70), linewidth=1)
bbMiddlePlot = plot(showBollingerBands ? bbMiddle : na, "BB Middle", color=color.gray, linewidth=1, style=plot.style_circles)

fill(bbUpperPlot, bbMiddlePlot, color=color.new(color.red, 95))
fill(bbMiddlePlot, bbLowerPlot, color=color.new(color.green, 95))

// Plot Buy/Sell Signals
plotshape(buySignal and inDateRange, title="Buy Signal", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)
plotshape(sellSignal and inDateRange, title="Sell Signal", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small)

// ================================================================================
// PERFORMANCE TABLE
// ================================================================================

var table perfTable = table.new(position.bottom_right, 2, 8, bgcolor=color.new(color.black, 85), border_width=1, border_color=color.gray)

if barstate.islast
    // Calculate performance metrics
    totalTrades = strategy.closedtrades
    winTrades = 0
    lossTrades = 0
    totalProfit = 0.0
    totalLoss = 0.0
    
    for i = 0 to totalTrades - 1
        profit = strategy.closedtrades.profit(i)
        if profit > 0
            winTrades += 1
            totalProfit += profit
        else
            lossTrades += 1
            totalLoss += math.abs(profit)
    
    winRate = totalTrades > 0 ? (winTrades / totalTrades) * 100 : 0
    profitFactor = totalLoss > 0 ? totalProfit / totalLoss : 0
    avgWin = winTrades > 0 ? totalProfit / winTrades : 0
    avgLoss = lossTrades > 0 ? totalLoss / lossTrades : 0
    
    // Display table
    table.cell(perfTable, 0, 0, "ðŸ“Š PERFORMANS", text_color=color.white, text_size=size.normal, bgcolor=color.new(color.blue, 50))
    table.cell(perfTable, 1, 0, "DEÄžER", text_color=color.white, text_size=size.normal, bgcolor=color.new(color.blue, 50))
    
    table.cell(perfTable, 0, 1, "Toplam Ä°ÅŸlem", text_color=color.white, text_size=size.small)
    table.cell(perfTable, 1, 1, str.tostring(totalTrades), text_color=color.white, text_size=size.small)
    
    table.cell(perfTable, 0, 2, "Kazanan Ä°ÅŸlem", text_color=color.white, text_size=size.small)
    table.cell(perfTable, 1, 2, str.tostring(winTrades), text_color=color.green, text_size=size.small)
    
    table.cell(perfTable, 0, 3, "Kaybeden Ä°ÅŸlem", text_color=color.white, text_size=size.small)
    table.cell(perfTable, 1, 3, str.tostring(lossTrades), text_color=color.red, text_size=size.small)
    
    table.cell(perfTable, 0, 4, "Kazanma OranÄ±", text_color=color.white, text_size=size.small)
    table.cell(perfTable, 1, 4, str.tostring(winRate, "#.##") + "%", text_color=winRate > 50 ? color.green : color.red, text_size=size.small)
    
    table.cell(perfTable, 0, 5, "Kar FaktÃ¶rÃ¼", text_color=color.white, text_size=size.small)
    table.cell(perfTable, 1, 5, str.tostring(profitFactor, "#.##"), text_color=profitFactor > 1 ? color.green : color.red, text_size=size.small)
    
    table.cell(perfTable, 0, 6, "Ort. KazanÃ§", text_color=color.white, text_size=size.small)
    table.cell(perfTable, 1, 6, str.tostring(avgWin, "#.##"), text_color=color.green, text_size=size.small)
    
    table.cell(perfTable, 0, 7, "Ort. KayÄ±p", text_color=color.white, text_size=size.small)
    table.cell(perfTable, 1, 7, str.tostring(avgLoss, "#.##"), text_color=color.red, text_size=size.small)

// ================================================================================
// END OF STRATEGY
// ================================================================================
